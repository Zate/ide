upCodeServer() {
    curl -fsSL https://code-server.dev/install.sh | sh -s --
}

upAWS() {
    pip3 install -U awscli --user
}


upGo() {
    sudo rm -rf /usr/local/go
    wget -qO- https://golang.org$( wget -qO- https://golang.org/dl/ | grep -oP '/dl/go([0-9\.]+)\.linux-amd64.tar.gz' | head -1)  | sudo tar zxf - -C /usr/local
    upPath
    go version
}

upPath () {
    #[[ $(grep -Fx "fi" ~/.bashrc) == "" ]] && echo "stuff" || echo "wat"
    [[ $(grep -Fx 'source ~/.local/.bash_inc' ~/.bashrc) == "" ]] && echo 'source ~/.local/.bash_inc' >> ~/.bashrc
    [[ $(grep -Fx 'export GOPATH=$HOME/go' ~/.local/.bash_inc) == "" ]] && echo 'export GOPATH=$HOME/go' >> ~/.local/.bash_inc
    [[ $(grep -Fx 'export GOROOT=/usr/local/go' ~/.local/.bash_inc) == "" ]] && echo 'export GOROOT=/usr/local/go' >> ~/.local/.bash_inc
    [[ $(grep -Fx 'export GOBIN=$GOPATH/bin' ~/.local/.bash_inc) == "" ]] && echo 'export GOBIN=$GOPATH/bin' >> ~/.local/.bash_inc
    [[ $(grep -Fx 'export PATH=$GOPATH:$GOROOT/bin:$HOME/bin:$HOME/.local/bin:$PATH' ~/.local/.bash_inc) == "" ]] && echo 'export PATH=$GOPATH:$GOROOT/bin:$HOME/bin:$HOME/.local/bin:$PATH' >> ~/.local/.bash_inc
    source ~/.local/.bash_inc
}

upTerraform() {
        URL=$(wget -qO- https://www.terraform.io/downloads.html | grep -oP 'https://releases.hashicorp.com/terraform/([0-9\.]+)/terraform_([0-9\.]+)_linux_amd64.zip')
        cd ~/bin
        wget -q --continue $URL 
        unzip -qqou terraform_*_linux_amd64.zip
        echo "Using: `which terraform`"
        echo "Version: `terraform version`"
        cd $OLDPWD

}

# install_p10k () {
#     # install powerline10k and fonts etc
#     echo ""
# }

# install_zsh () {
#     # Do magic to install oh my zsh and the nice defaults etc.
#     sudo DEBIAN_FRONTEND=noninteractive apt-get -qq -y install -o=Dpkg::Use-Pty=0 zsh > /dev/null
#     D_ZSH=$(which zsh) || true
# }

# check_docker () {
#     [[ -f "/.dockerenv" ]] && echo "We are in docker"; export D_DOCK=true || true
#     echo "end check_docker"
# }

# check_zsh () {
#     echo " start check_zsh"
#     D_ZSH=$(which zsh) || true
#     [[ $D_ZSH == "" ]] && echo "No zsh installed, installing now."; install_zsh || true
# #    [[ $D_ZSH != "" ]] && chsh -s ${D_ZSH} || true
#     install_omz || true
#     echo "end check_zsh"
# }

# install_omz () {
#     echo "start install_omz"
#     sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
#     echo "end install_omz"
# }

